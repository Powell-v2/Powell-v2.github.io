{"data":{"mdx":{"id":"3d13d8ea-69e1-5af6-b6c1-8f5badd90a6e","frontmatter":{"title":"My Favourite Chromium Console Utils","date":"June 18, 2019"},"code":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2019-06-18T00:00:00.000Z\",\n  \"title\": \"My Favourite Chromium Console Utils\",\n  \"published\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Chromium-based browsers like Google Chrome, Brave and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blogs.windows.com/windowsexperience/2019/04/08/microsoft-edge-preview-builds-the-next-step-in-our-oss-journey/#dxRrXrmSwskLXdwA.97\"\n  }), \"now even Microsoft Edge\"), \" come pre-packed with a suite of convenient utilities available in JavaScript console panel. They have proven helpful to me over the years, and in this short article I'd like to make an overview of the ones I find myself using quite frequently.\"), mdx(\"h2\", null, \"Get the last element touched by the DOM Inspector\"), mdx(\"p\", null, \"There is a special variable which holds a reference to the most recently selected node within the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Elements\"), \" panel - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$0\"), \".\"), mdx(\"p\", null, \"To illustrate, let's say we wanted to take at Octocat logo's underlying DOM definition on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/\"\n  }), \"GitHub\"), \" (micro-tip: you can quickly access \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Inspector\"), \" tool by pressing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Cmd+Shift+C\"), \"):\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"pic1\",\n    \"alt\": \"Select Octocat Logo\"\n  }))), mdx(\"p\", null, \"Now if we switch over to the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Console\"), \" panel and evaluate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$0\"), \", it would yield us the last selected node:\"), mdx(\"p\", null, \"[Screencap]\"), mdx(\"p\", null, \"If we went on to select different DOM node, it would become the new value of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$0\"), \". However, previous one still remains available, although at a different location - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$1\"), \":\"), mdx(\"p\", null, \"[Screencap]\"), mdx(\"p\", null, \"Console is capable of holding up to 5 such references (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$0\"), \" through \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$4\"), \"). It's worth mentioning that these variables could also be leveraged when analyzing JS performance - in this context, they will hold last five heap objects.\"), mdx(\"h2\", null, \"DOM query selectors\"), mdx(\"p\", null, \"DOM elements could be retrieved by calling either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"document.querySelector\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"document.querySelectorAll\"), \". However, in order to save few keystrokes, I often opt into using their aliases instead - \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$$\"), \" respectively. They are actually enhanced versions of the said methods as you can specify a starting node for your search - it doesn't have to always be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"document\"), \", which is the default:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$(selector, [startNode: document])\")), mdx(\"p\", null, \"[Screencap]\"), mdx(\"h2\", null, \"getAllEventListeners\"), mdx(\"p\", null, \"With the help of this utility you can get a list of all event listeners attached to the given DOM node. It returns an object with all events conveniently grouped under respective keys. Nifty, eh?\"), mdx(\"p\", null, \"[Screencap]\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"$_\"), \", or the result of the last evaluated expression\"), mdx(\"p\", null, \"These squiggles always hold an outcome of the most recently evaluated expression:\"), mdx(\"p\", null, \"[Screencap]\"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"copy\")), mdx(\"p\", null, \"Ever wondered how to copy an object from the console to the clipboard without directly selecting it? \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"copy\"), \" does exactly that - just feed something (doesn't have to be strictly an object - could be an array, a number or a DOM node) and now you have it ready for pasting.\"), mdx(\"p\", null, \"[Screencap]\"), mdx(\"p\", null, \"Described utilities represent only a subset of what's out there. For those curious to find out more, take a look at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"3\"\n  }), \"complete \", mdx(\"em\", {\n    parentName: \"a\"\n  }, \"Console Utilities API\"), \" reference\"), \".\"));\n}\nMDXContent.isMDXComponent = true;"}}},"pageContext":{"id":"3d13d8ea-69e1-5af6-b6c1-8f5badd90a6e"}}